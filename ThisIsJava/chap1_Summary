자바 시작하기

1. 프로그래밍 언어란?
	
	- 사람의 언어와 기계어의 다리 역할을 하는 언어
	- '고급 언어'와 '저급 언어' 존재

2. 자바란?

	2.1 자바 소개
		
		- 썬 마이크로시스템즈에서 발표한 언어
		- 다양한 서버 운영체제에서 단 한 번의 작성으로 모든 곳에서 실행 가능한 언어는 자바뿐이어서 공공기관 웹 애플리케이션 구축용 언어로 성장
		
	2.2 자바의 특징
	
		- 이식성이 높은 언어
			자바 언어로 개발된 프로그램은 소스 파일을 다시 수정하지 않아도, 자바 실행 환경(JRE)이 설치되어 있는 모든 운영체제에서 실행 가능
			
		- 객체 지향 언어
			부품에 해당하는 객체들은 먼저 만들고, 이것들을 하나씩 조립 및 연결해서 전체 프로그램을 완성하는 기법(OOP : 객체 지향 프로그래밍)
			캡슐화, 상속, 다형성 기능을 완벽하게 지원
			
		- 함수적 스타일 코딩 지원
			함수적 프로그래밍을 위해 람다식을 자바 8부터 지원
			람다식을 사용하면 컬렉션의 요소를 필터링, 매핑, 집계 처리하는데 쉬워지고, 코드가 매우 간결해짐
			
		- 메모리를 자동으로 관리
			객체 생성 시 자동적으로 메모리 영역을 찾아서 할당하고, 사용이 완료되면 Garbage Collector를 실행시켜 자동적으로 사용하지 않는 객체를 제거
			
		- 다양한 애플리케이션 개발
			다양한 운영체제에서 실행되는 프로그램 개발 가능
			콘솔 프로그램에서부터 윈도우 애플리케이션, 서버용 웹 애플리케이션, 모바일 안드로이드 앱 등 개발 가능
			다양한 운영체제에서 사용할 수 있는 개발 도구와 API를 묶어 에디션(Edition) 형태로 정의하고 있음
			
		- 멀티 스레드(Multi-Thread)를 쉽게 구현 가능
			스레드 생성 및 제어와 관련된 라이브러리 API를 제공하고 있음
			
		- 동적 로딩 지원
			애플리케이션이 실행될 때 모든 객체가 생성되지 않고, 객체가 필요한 시점에 클래스를 동적 로딩해서 객체를 생성
			
	2.3 자바 가상 기계(JVM)
		
		- 자바 프로그램은 완전한 기계어가 아닌, 중간 단계의 바이트 코드이기 때문에 이것을 해석하고 실행할 수 있는 가상의 운영체제(JVM)가 필요
		- JVM은 실 운영체제를 대신해서 자바 프로그램을 실행하는 가상의 운영체제 역할을 함
		- 바이트 코드는 모든 JVM에서 동일한 실행 결과를 보장하지만, JVM은 운영체제에 종속적
		- JVM은 JDK 또는 JRE를 설치하면 자동으로 설치됨
		
		- 자바 프로그램은 확장자가 .java인 파일을 작성하는 것부터 시작됨
		- 이 소스를 컴파일러(javac.exe)로 컴파일하면 확장자가 .class인 바이트 코드 파일이 생성됨
		- 바이트 코드 파일은 JVM 구동 명령어(java.exe)에 의해 JVM에서 해석되고 해당 운영 체제에 맞게 기계어로 번역됨
		
		- JVM에 의해 기계어로 번역되고 실행되기 때문에, C와 C++의 컴파일 단계에서 만들어지는 완전한 기계어보다는 속도가 느림
		
3. 자바 개발 환경 구축

	3.1 자바 개발 도구(JDK) 설치
		
		- JAVA SE : Standard Edition, 자바 프로그램 개발에 필수적인 도구와 라이브러리 API를 정의
		- JAVA EE : Enterprise Edition, 분산 환경에서 서버용 애플리케이션을 개발하기 위한 도구 및 라이브러리 API를 정의
		
		- JRE = JVM + 표준 클래스 라이브러리
		- JDK = JRE + 개발에 필요한 도구
		
		- JDK를 설치하면 기본 위치에 bin 디렉토리가 있고, 내부에 java 명령어들이 포함되어 있음
		- 이를 어느 디렉토리에서든 사용하기 위해 Path 환경 변수에 bin 위치를 등록하게 됨
		
		- 환경 변수 설정
			JAVA_HOME으로 JDK가 설치된 경로 설정
			Path에 %JAVA_HOME%bin 설정
			
	3.2 API 도큐먼트
	
		- 자바 프로그램을 개발하기 위해서는 JDK에서 제공하는 표준 클래스 라이브러리를 반드시 사용해야 함
		- 이 클래스는 API(Application Programming Interface)라고도 함
		- API들이 매우 방대하기 때문에 쉽게 찾을 수 있도록 API 도큐먼트를 제공함
		
4. 자바 프로그램 개발 순서

	4.1 소스 작성에서 실행까지
	
		- java 소스 파일 작성
		- 컴파일러(javac.exe)로 바이트 코드 파일(.class) 생성
		- JVM 구동 명령어(java.exe)로 실행
		
	4.2 프로그램 소스 분석
	
		- 클래스 : 필드 또는 메소드를 포함하는 블록
			중괄호({)부터 그와 짝을 이루는 중괄호(})까지가 클래스 블록
			클래스 이름은 개발자가 마음대로 정할 수 있음
			소스 파일명과 대소문자가 일치해야 함
			숫자로 시작할 수 없고, 공백을 포함해서는 안됨
			일반적으로 대문자로 시작하도록 약속
			
		- 메소드 : 어떤 일을 처리하는 실행문들을 모아 놓은 블록
			클래스 블록 내부에서 작성되어야 함
			메소드 이름은 개발자가 마음대로 정할 수 있지만 main() 메소드는 이름을 바꾸면 안됨
			java.exe로 JVM을 실행시키면 제일 먼저 main() 메소드를 찾아서 실행시키기 때문
			
5. 주석과 실행문

	5.1 주석 사용하기
	
		- 주석은 프로그램 실행과 상관없이 코드에 설명을 붙인 것을 말함
		- 컴파일 과정에서 주석은 무시되고 실행문만 바이트 코드로 번역됨
		- // : 행주석, //부터 라인 끝까지 주석으로 처리
		- /* ~ */ : 범위 주석, /*와 */ 사이에 있는 모든 범위를 주석으로 처리
		- /** ~ */ : 도큐먼트 주석, javadoc.exe 명령어로 API 도큐먼트를 생성하는데 사용됨
		
	5.2 실행문과 세미콜론(;)
	
		- 실행문은 변수 선언, 값 저장, 메소드 호출에 해당하는 코드를 말함
		- 실행문의 마지막에 반드시 세미콜론(;)을 붙여서 실행문이 끝났음을 표시해주어야 함
		- 컴파일러는 세미콜론(;)이 나올 때까지 실행문이 계속해서 연결된 것으로 보기 때문에 한 실행문이 여러 줄에 걸쳐 있어도 되고, 한 줄에 여러 개의 실행문이 있어도 됨
		
6. 이클립스 설치

	6.1 이클립스 소개
	
		- 자바 프로그램을 개발하기 위한 통합 개발 환경(IDE : Integrated Development Environment)을 제공
		- 프로젝트 생성, 자동 코드 완성, 디버깅 기능
		
	6.2 이클립스 다운로드
	
		- 이클립스는 자바 언어로 개발된 툴이기 때문에 이클립스를 실행하려면 JVM이 필요
		- JDK를 설치한 후, 이클립스 사이트(www.eclipse.org)에서 다운 받아서 설치
		- 순수 자바를 위해서는 Eclipse IDE for Java Developers를 받으면 됨
		- 웹 애플리케이션 등의 엔터프라이즈 환경에서 실행되는 자바 애플리케이션을 개발하기 위해서는 Eclipse IDE For Java EE Developers를 받아야 함
		
	6.3 워크스페이스
	
		- Workspace는 이클립스에서 생성한 프로젝트가 기본적으로 저장되는 디렉토리를 말함
		- 실행될 때 적용되는 메타데이터를 워크스페이스의 하위 디렉토리인 .metadata에 저장
		- 동일한 워크스페이스에서 이클립스를 재시작할 경우 이전에 작업한 환경으로 복원할 목적으로 사용
		- 이클립스를 초기 상태로 돌리기 위해서는 .metadata 디렉토리를 강제로 삭제하고 재시작하면 됨
		
	6.4 퍼스펙티브와 뷰
	
		- 퍼스펙티브(Perspective)는 이클립스에서 프로젝트를 개발할 때 유용하게 사용하는 뷰(view)들을 묶어 놓은 것을 말함
		- 뷰(view)는 이클립스 내부에서 사용되는 작은 창을 말함
		- 기본적으로 이클립스(Eclipse IDE For Java EE Developers)는 Java EE 퍼스펙티브를 보여줌
		
		- 제일 많이 사용하는 뷰는 Package Explorer 뷰
		- 프로젝트를 관리하고, 자바 소스 파일을 생성 및 삭제하는 작업을 함
		
		- Console 뷰는 프로그램에서 콘솔로 출력하는 내용을 보여줌
		
	6.5 프로젝트 생성
	
		- 자바 소스 파일을 작성하려면 우선 자바 프로젝트를 생성해야 함
		- 프로젝트는 기본적으로 워크스페이스의 하위 디렉토리로 생성됨
		- JRE는 프로젝트를 실행할 때 사용할 버전을 말함
		
		- Project layout에는 자바 소스 파일(.java)과 컴파일된 바이트 코드 파일(.class)을 분리 저장하도록 설정되어 있음
		- 자바 소스 파일은 src에, 바이트 코드 파일은 bin 디렉토리에 기본적으로 저장됨
		
	6.6 소스 파일 생성과 컴파일
	
		- New - Class 를 선택해서 New Java Class 대화 상자 실행
		- Package는 클래스를 포함하는 그룹명 정도로 생각하면 됨
		
		- 에디터의 행 번호를 보고 싶다면 메뉴에서 Window - Preferences를 클릭하고 트리 메뉴에서
		 General - Editors - Text Editors를 선택한 후, Show line numbers를 체크

		- 작성한 소스를 저장하면 내부적으로 javac가 자동 실행되어 컴파일을 수행함
		- 컴파일이 성공되면 bin 디렉토리에 바이트 코드 파일이 생성됨
		- bin 디렉토리는 Package Explorer에서는 보이지 않으므로 보고 싶다면 
		 Window - Show View - Navigator를 선택하면 됨
		 
	6.7 바이트 코드 실행
	
		- Package Explorer 뷰에서 실행을 원하는 소스 파일을 선택하고, 우클릭 - Run As - Java Application 을 클릭
		- 또는 툴바에서 실행 버튼 클릭

----------------------------------------------------------------------------------------------------------------------------------------

확인 문제

1. JDK와 JRE의 차이점을 설명한 것 중 틀린 것은 무엇입니까?

	1) JDK는 JRE와 컴파일러 등의 개발 도구가 포함된다.
	2) 자바 프로그램을 개발하려면 JDK가 반드시 필요하다.
	3) 자바 프로그램을 실행만 하려면 JRE를 설치해도 상관없다.
	4) JRE에는 컴파일러(javac.exe)가 포함되어 있다.
	
2. JVM에 대한 설명으로 틀린 것은 무엇입니까?

	1) JVM은 java.exe 명령어에 의해 구동된다.
	2) JVM은 바이트 코드를 기계어로 변환시키고 실행한다.
	3) JVM은 운영체제에 독립적이다(운영체제별로 동일한 JVM이 사용된다).
	4) 바이트 코드는 JVM에 독립적이지만, JVM은 운영체제에 종속적이다.

3. 자바 프로그램 개발 과정을 순서대로 나열하세요.

	1) javac.exe로 바이트 코드 파일(.class)을 생성한다.
	2) java.exe로 JVM을 구동시킨다.
	3) 자바 소스 파일(.java)을 작성한다.
	4) JVM은 main() 메소드를 찾아 메소드 블록을 실행시킨다.
	
4. 자바 소스 파일을 작성할 때 틀린 것은 무엇입니까?

	1) 자바 소스 파일명과 클래스 이름은 대소문자가 동일해야 한다.
	2) 클래스 블록과 메소드 블록은 반드시 중괄호 {}로 감싸야 한다.
	3) 실행문 뒤에는 반드시 세미콜론(;)을 붙여야 한다.
	4) 주석은 문자열 안에도 작성할 수 있다.
	
5. 자바 주석문의 종류가 아닌 것은 무엇입니까?

	1) // : 행 주석
	2) /* ~ */ : 범위 주석
	3) /** ~ */ : API 도큐먼트 주석
	4) <!-- ~ --> : 범위 주석
	
6. 이클립스에 대한 설명으로 틀린 것은 무엇입니까?

	1) 이클립스는 JDK(JRE)를 설치해야만 실행할 수 있다.
	2) 이클립스에서 소스 파일을 저장하면 자동 컴파일되어 바이트 코드 파일이 생성된다.
	3) 워크스페이스는 프로젝트들이 생성되는 기본 디렉토리를 말한다.
	4) .metadata는 프로젝트의 소스 파일들이 저장되는 디렉토리이다.
	
----------------------------------------------------------------------------------------------------------------------------------------

확인 문제 정답

1. 4)
2. 3)
3. 3) - 1) - 2) - 4)
4. 4)
5. 4)
6. 4)