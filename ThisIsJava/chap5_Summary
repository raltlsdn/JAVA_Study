참조 타입

1. 데이터 타입 분류

	- 자바의 데이터 타입은 크게 기본 타입(원시 타입 : primitive type)과 참조 타입(reference type)으로 분류됨
	- 참조 타입이란 객체(Object)의 번지를 참조하는 타입으로 배열, 열거, 클래스, 인터페이스 타입을 말함
	
	- 기본 타입으로 선언된 변수와 참조 타입으로 선언된 변수의 차이점
		저장되는 값이 무엇인가
		기본 타입 : 실제 값을 변수 안에 저장
		참조 타입 : 메모리의 번지를 값으로 저장(번지를 통해 객체를 참조)
	
	- 변수는 스택(stack) 영역에 생성, 객체는 힙(heap) 영역에 생성
		int age = 25;
		double price = 100.5;
		
		String name = "신용권";
		String hobby = "독서";
		
		위 변수 선언에서, 기본 타입인 age와 price는 스택 영역에 값 자체를 가지지만,
		참조 타입인 name과 hobby는 실제 값을 힙 영역에 저장한 후, 힙 영역의 번지를 스택 영역에 저장하게 됨
		
2. 메모리 사용 영역

	- JVM이 사용하는 메모리 영역
		메소드 영역(Method Area), 힙 영역(Heap Area), JVM 스택(Stack)
		
	2.1 메소드(Method) 영역	
		
		- JVM이 시작할 때 생성되고 모든 스레드가 공유하는 영역
		- 런타임 상수풀, 필드 데이터, 메소드 데이터, 메소드 코드, 생성자 코드 등을 분류해서 저장
		
		- 힙(Heap) 영역
			객체와 배열이 생성되는 영역
			힙 영역에 생성된 객체와 배열은 JVM 스택 영역의 변수나 다른 객체의 필드에서 참조함
			참조하는 변수나 필드가 없다면 의미 없는 객체가 되므로 JVM은 Garbage Collector를 실행시켜 제거함
			따라서 개발자는 객체를 직접 제거할 필요가 없음
			
		- JVM 스택(Stack) 영역
			각 스레드마다 하나씩 존재하며 스레드가 시작될 때 할당됨
			추가적으로 스레드를 생성하지 않았다면 main스레드만 존재하므로 JVM 스택도 하나임
			
			JVM 스택은 메소드를 호출할 때마다 프레임(Frame)을 추가(push)하고 메소드가 종료되면 해당 프레임을 제거(pop)하는 동작을 수행
			
			예외 발생 시 printStackTrace() 메소드로 보여주는 Stack Trace의 각 라인은 하나의 프레임을 표현함
			
			프레임 내부에는 로컬 변수 스택이 있는데, 기본 타입 변수와 참조 타입 변수가 추가(push)되거나 제거(pop)됨
			최초로 변수에 값이 저장될 때 이 영역에 변수가 생성됨
			변수는 선언된 블록 안에서만 스택에 존재하고 블록을 벗어나면 스택에서 제거됨
			
3. 참조 변수의 ==, != 연산

	- 기본 타입 변수의 ==, != 연산은 변수의 값이 같은지, 아닌지를 조사함
	- 참조 타입 변수들 간의 ==, != 연산은 동일한 객체를 참조하는지, 다른 객체를 참조하는지 알아볼 때 사용됨
		참조 타입 변수의 값은 힙 영역의 객체 주소이므로 결국 주소 값을 비교하는 것
		동일 주소 값 = 동일 객체 참조
		동일 객체 참조의 경우 == 연산의 결과가 true로 나옴
		
4. null과 NullPointerException

	- 참조 타입 변수는 힙 영역의 객체를 참조하지 않는다는 뜻으로 null 값을 가질 수 있음
		참조 타입 변수가 null 값을 가지는지 확인하려면 ==, != 연산을 수행
		refVar1 == null;
		refVar1 != null;
		
	- 참조 변수 사용 중 가장 많이 발생하는 예외로 NullPointerException이 있음
		참조 타입 변수를 잘못 사용하면 발생
		참조 타입 변수가 null을 가지고 있을 경우, 참조 타입 변수는 사용할 수 없음(참조할 객체가 없기 때문)
		int[] intArray = null;
		intArray[0] = 10; 		- NullPointerException 발생(intArray는 null로 참조하는 객체 자체가 없기 때문)
		
		String str = null;
		System.out.println(str.length());		- NullPointerException 발생(str 변수가 참조하는 String 객체가 없기 때문)
		
5. String 타입

	- 문자열을 String 변수에 저장
		String 변수;
		변수 = "문자열";		- 문자열은 쌍따옴표로 표시
		
		String 변수 = "문자열";	- 선언과 초기화 동시
		
	- 정확히 표현하자면 [문자열을 String 변수에 저장]한다는 말은 틀린 말
		String 객체로 문자열이 생성되고, 변수는 String 객체를 참조함
		
	- 문자열 리터럴이 동일하다면 String 객체를 공유하도록 되어 있음
		String name1 = "신용권";
		String name2 = "신용권";
		위 경우 name1과 name2는 동일한 객체를 참조
		
		String name1 = new String("신용권");
		String name2 = new String("신용권");
		위 경우 name1과 name2는 다른 객체를 참조
		
		String name1 = "신용권";
		String name2 = "신용권";
		String name3 = new String("신용권");
			name1 == name2 		- true
			name1 == name3		- false
			객체와 상관없이 문자열만을 비교할 때에는 String객체의 equals() 메소드를 사용해야 함
			name1.equals(name3) 	- true
			
	- String 변수는 참조 타입이므로 초기값으로 null을 대입할 수 있음
		String hobby = "여행";
		hobby = null;		- hobby 변수가 String 객체를 참조하였으나 null을 대입하면 String 객체를 참조하지 않게 됨. 메모리에서 자동 제거
		
6. 배열 타입

	6.1 배열이란?
		
		- 변수는 한 개의 데이터만 저장할 수 있음
		- 같은 타입의 많은 양의 데이터를 다루기 위한 방법이 배열
		- 배열 : 같은 타입의 데이터를 연속된 공간에 나열시키고, 각 데이터에 인덱스(index)를 부여해 놓은 자료구조
		
		- 다른 타입의 값을 저장하려고 하면 타입 불일치(Type Mismatch) 컴파일 오류가 발생
		
		- 한 번 생성된 배열은 길이를 늘리거나 줄일 수 없음
		
	6.2 배열 선언
	
		- 배열 변수 선언
			타입[] 변수; 또는 
			타입 변수[];
			
			int[] intArray;
			double[] doubleArray;
			String[] strArray
			
			int intArray[];
			double doubleArray[];
			String strArray[];
			
		- 배열 변수는 참조 변수에 속함
			자바는 배열을 객체로 다루기 때문에 힙 영역에 생성되고, 배열 변수는 힙 영역의 배열 객체를 참조하게 됨
			
		- 참조할 배열 객체가 없다면 배열 변수는 null 값으로 초기화될 수 있음
			타입[] 변수 = null;
			
	6.3 값 목록으로 배열 생성
	
		- 배열 항목에 저장될 값의 목록이 있다면, 다음과 같이 배열 객체 만들 수 있음
			타입[] 변수 = {값0, 값1, 값2, ... };
			
		- 배열 변수를 이미 선언한 후에 다른 실행문에서 중괄호를 사용한 배열 생성은 허용되지 않음
			타입[] 변수;
			변수 = {값0, 값1, 값2, ... };		- 컴파일 에러
			
		- 배열 변수를 미리 선언한 후, 값 목록들이 나중에 결정되는 상황이라면 new 연산자를 사용
			변수 = new 타입[] {값0, 값1, 값2, ... };
			
		- 메소드의 매개값이 배열일 경우
			int add(int[] scores) { ... }
			
			int result = add( {95, 85, 90} );		- 컴파일 에러
			int result = add( new int[] {95, 85, 90} );
			
	6.4 new 연산자로 배열 생성
	
		- 값의 목록을 가지고 있지 않지만, 향후 값들을 저장할 배열을 미리 만들고 싶다면 new 연산자로 생성
			타입[] 변수 = new 타입[길이];
			
			타입[] 변수 = null;
			변수 = new 타입[길이];			- 가능
			
		- 타입별 배열 초기값
			
			분류				데이터 타입			초기값
		----------------------------------------------------------
			기본 타입(정수)		byte[]			0
							char[]			'\u0000'
							short[]			0
							int[]			0
							long[]			0L
							
			기본 타입(실수)		float[]			0.0F
							double[]		0.0
							
			기본 타입(논리)		boolean[]		false
			
			참조 타입			클래스[]			null
							인터페이스[]		null
		
			
	6.5 배열 길이
	
		- 배열의 길이란 배열에 저장할 수 있는 전체 항목 수를 말함
			배열 객체의 length 필드를 읽으면 됨
			배열변수.length;
			
			int[] intArray = { 10, 20, 30 };
			int num = intArray.length;
			
			length 필드는 읽기 전용 필드이기 때문에 값을 바꿀 수 없음
			
	6.6 커맨드 라인 입력
		
		- 프로그램 실행을 위해 main() 메소드가 필요
			main() 메소드의 매개값인 String[] args는 무엇일까?
			
		- cmd에서 "java 클래스"로 프로그램을 실행하면 JVM은 길이가 0인 String 배열을 먼저 생성하고 main() 메소드를 호출할 때 매개값으로 전달함
			"java 클래스 문자열0 문자열1 문자열2 ... 문자열n-1"로 실행하면,
			String[] args = { 문자열0, 문자열1, 문자열2, ... , 문자열n-1 }; 로 문자열 생성 후
			main() 메소드 호출 시 매개값으로 전달하게 됨
			
		- 이클립스에서 매개값을 전달해서 실행하려면
			Run - Run Configurations... 를 선택
				Main 탭에서 Project와 Main Class를 확인 하고
				Arguments 탭에서 Program arguments에 매개값을 입력함
				
	6.7 다차원 배열
	
		- 행과 열로 구성된 배열을 2차원 배열이라 함
			가로 인덱스와 세로 인덱스 사용
			int[][] scores = new int[2][3];
			
			이 코드는 메모리에 세 개의 배열 객체를 생성함
			배열 변수인 scores는 길이 2인 배열을 참조
			길이 2인 배열의 각 값은 길이3인 배열 두 개를 각각 참조
			
		- 일차원 배열을 연결한 구조로 다차원 배열을 구현하기 때문에 계단식 구조를 가질 수 있음
			int[][] scores = new int[2][];
			scores[0] = new int[2];
			scores[1] = new int[3];
			
		- 그룹화된 값 목록을 가지고 있다면 중괄호 안에 중괄호를 사용해서 다차원 배열 생성 가능
			타입[][] 변수 = { {값1, 값2, ...}, {값1, 값2, ... }, ... };
			
	6.8 객체를 참조하는 배열
	
		- 기본 타입 배열은 각 항목에 직접 값을 가지고 있지만, 참조 타입 배열은 각 항목에 객체의 번지를 가지고 있음
			String[] 배열은 각 항목에 문자열이 아니라 String 객체의 주소를 가지고 있음
			따라서 String[] 배열 항목 간에 문자열을 비교하기 위해서는 == 대신 .equals() 메소드를 사용해야 함
			
			String[] strArray = new String[3];
			strArray[0] = "Java";
			strArray[1] = "Java";
			strArray[2] = new String("Java");
			
			strArray[0] == strArray[1]		- true  문자열 리터럴이 동일하므로 동일 객체를 참조
			strArray[0] == strArray[2]		- false new로 새 객체를 생성했으므로 다른 객체를 참조
			strArray[0].equals(strArray[2])	- true	문자열 리터럴의 값만을 비교
			
	6.9 배열 복사
	
		- 배열은 한 번 생성하면 크기를 변경할 수 없기 때문에 더 많은 저장 공간이 필요하다면 보다 큰 배열을 새로 만들고 이전 배열로부터 값을 복사해야 함
			for문 또는 System.arraycopy() 메소드를 사용하면 됨
			
			System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length);
				src - 원본 배열
				srcPos - 원본 배열의 복사할 항목의 시작 인덱스
				dest - 새 배열
				destPos - 새 배열에서 붙여넣을 시작 인덱스
				length - 복사할 개수
			
			원본 배열이 arr1 이고 새 배열이 arr2 인 경우 모든 항목 복사
				System.arraycopy(arr1, 0, arr2, 0, arr1.length);
				
				
	6.10 향상된 for문
	
		- 배열 및 컬렉션 객체를 좀 더 쉽게 처리할 목적으로 향상된 for문을 제공함
			배열 및 컬렉션 항목의 수만큼 반복하고, 자동으로 for문을 빠져나감
			for( 1)타입 변수 : 2)배열 ) {
				 3)실행문;
			}
			
			2) 배열에서 가져올 값이 있는지 평가 한 후, 값이 존재하면 해당 값을 1)변수에 저장
			3) 실행문을 실행하고 다시 2) 배열에서 가져올 값이 있는지 평가
			
7. 열거 타입

	- 열거 타입 : 몇 가지로 한정된 값만을 갖는 데이터 타입
		enumeration type
	
	7.1 열거 타입 선언
		
		- 열거 타입의 이름을 정하고 열거 타입 이름으로 소스 파일(.java)을 생성해야 함
			관례적으로 첫 문자를 대문자로 하고 나머지를 소문자로 함
			Week.java
			MemberGrade.java
			ProductKind.java
			
		- 소스 파일의 내용으로는 열거 타입 선언이 옴
			public enum 열거타입이름 {
				열거 상수			- 열거 상수 이름은 관례적으로 모두 대문자로 작성, 열거 상수가 여러 단어로 구성될 경우 밑줄(_)로 연
			}
			
			public enum Week {
				MONDAY,
				TUESDAY,
				WEDNESDAY,
				THURSDAY,
				FRIDAY,
				SATURDAY,
				SUNDAY
			}
			
	7.2 열거 타입 변수
		
		- 열거타입 변수; 					- 선언
		- 열거타입 변수 = 열거타입.열거상수; 	- 상수 저장, 반드시 열거타입.열거상수 형식으로 써야 함
			
		- 열거 타입도 참조 타입이므로 null 값 저장 가능
			
			열거 타입도 객체
			참조 타입이므로 열거타입 변수는 객체의 주소를 참조
			열거 상수 각각이 객체로 생성됨
			
			메소드 영역에 생성된 열거 상수가 해당 열거 객체를 각각 참조하게 됨
			
			Week week1 = Week.SATURDAY;
			Week week2 = Week.SATURDAY;
			
			week1 == week2		- true
			
		- 자바는 컴퓨터의 날짜 및 요일, 시간을 프로그램에서 사용할 수 있도록 하기 위해 Date, Calendar, LocalDateTime 등의 클래스를 제공함
		
	7.3 열거 객체의 메소드
	
		- 열거 객체는 열거 상수의 문자열을 내부 데이터로 가지고 있음
		- 모든 열거 타입은 컴파일 시에 Enum 클래스를 상속하도록 되어 있어서 java.lang.Enum 클래스에 선언된 메소드를 사용할 수 있음
		
			리턴 타입			메소드(매개 변수)				설명
		------------------------------------------------------------------------
			String			name()					열거 객체의 문자열을 리턴
			int				ordinal()				열거 객체의 순번(0부터 시작)을 리턴
			int 			compareTo()				열거 객체를 비교해서 순번 차이를 리턴
			열거 타입			valueOf(String name)	주어진 문자열의 열거 객체를 리턴
			열거 배열			values()				모든 열거 객체들을 배열로 리턴
			
		- name() 메소드
			열거 객체가 가지고 있는 문자열을 리턴
			열거 타입을 정의할 때 사용한 상수 이름과 동일
			
			Week today = Week.SUNDAY;
			String name = today.name();		- name 변수에는 SUNDAY 문자열이 저장됨
			
		- ordinal() 메소드
			열거 객체 중 몇 번째 열걱 객체인지 알려줌
			열거 타입을 정의할 때 주어진 순번(0부터 시작)
			
			Week today = Week.SUNDAY;
			int ordinal = today.ordinal();	- ordinal 변수에는 SUNDAY 객체의 순번(6)이 저장됨
			
		- compareTo() 메소드
			매개값으로 주어진 열거 객체를 기준으로 전후로 몇 번째 위치하는지를 비교
			순번이 빠르면 음수, 늦으면 양수가 리턴
			
			Week day1 = Week.MONDAY;
			Week day2 = Week.WEDNESDAY;
			
			int result1 = day1.compareTo(day2);	- result1 변수에는 day2을 기준으로 day1의 순번(-2)을 리턴
			int result2 = day2.compareTo(day1);	- result2 변수에는 day1을 기준으로 day2의 순번(2)을 리턴
			
		- valueOf() 메소드
			매개값으로 주어지는 문자열과 동일한 문자열을 가지는 열거 객체를 리턴
			
			Week weekDay = Week.valueOf("SATURDAY");	- weekDay 변수는 SATURDAY와 동일한 문자열을 가진 Week.SATURDAY 객체를 참조함
			
		- values() 메소드
			열거 타입의 모든 열거 객체들을 배열로 만들어 리턴
			
			Week[] days = Week.values();		- Week 열거 타입의 모든 열거 객체를 days 배열로 만듦
			
			배열의 인덱스는 열거 객체의 순번과 같고 각 인덱스 값은 해당 순번의 열거 객체 번지
			
----------------------------------------------------------------------------------------------------------------------------------------

확인 문제

1. 참조 타입에 대한 설명으로 틀린 것은 무엇입니까?

	1) 참조 타입에는 배열, 열거, 클래스, 인터페이스가 있다.
	2) 참조 타입 변수의 메모리 생성 위치는 스택이다.
	3) 참조 타입에서 ==, != 연산자는 객체 번지를 비교한다.
	4) 참조 타입은 null 값으로 초기화할 수 없다.

2. 자바에서 메모리 사용에 대한 설명으로 틀린 것은 무엇입니까?

	1) 로컬 변수는 스택 영역에 생성되며 실행 블록이 끝나면 소멸된다.
	2) 메소드 코드나, 상수, 열거 상수는 정적(메소드) 영역에 생성된다.
	3) 참조되지 않는 객체는 프로그램에서 직접 소멸 코드를 작성하는 것이 좋다.
	4) 배열 및 객체는 힙 영역에 생성된다.
	
3. String 타입에 대한 설명으로 틀린 것은 무엇입니까?

	1) String은 클래스이므로 참조 타입이다.
	2) String 타입의 문자열 비교는 ==를 사용해야 한다.
	3) 동일한 문자열 리터럴을 저장하는 변수는 동일한 String 객체를 참조한다.
	4) new String("문자열")은 문자열이 동일하더라도 다른 String 객체를 생성한다.
	
4. 배열을 생성하는 방법으로 틀린 것은 무엇입니까?

	1) int[] array = { 1, 2, 3 };
	2) int[] array; array = { 1, 2, 3 };
	3) int[] array = new int[3];
	4) int[][] array = new int[3][2];
	
5. 배열의 기본 초기값에 대한 설명으로 틀린 것은 무엇입니까?

	1) 정수 타입 배열 항목의 기본 초기값은 0이다.
	2) 실수 타입 배열 항목의 기본 초기값은 0.0f 또는 0.0이다.
	3) boolean 타입 배열 항목의 기본 초기값은 true이다.
	4) 참조 타입 배열 항목의 기본 초기값은 null이다.
	
6. 배열의 길이에 대한 문제입니다. array.length의 값과 array[2].length의 값은 얼마입니까?

	int[][] array = {
			{95, 86},
			{83, 92, 96},
			{78, 83, 93, 87, 88}
	};
	
7. 주어진 배열의 항목에서 최대값을 구해보세요(for문을 이용하세요).

	Exercise07.java
	--------------------------------------------------
	public class Excercise07 {
		public static void main(String[] args) {
			int max = 0;
			int[] array = { 1, 5, 3, 8, 2 };

			//작성 위치
			
			System.out.println("max : " + max);

		}
	}
	
8. 주어진 배열의 전체 항목의 합과 평균값을 구해보세요(중첩 for문을 이용하세요).

	Exercise08.java
	--------------------------------------------------
	public class Excercise08 {
		public static void main(String[] args) {
			int[][] array = {
					{95, 86},
					{83, 92, 96},
					{78, 83, 93, 87, 88}
			};
			
			int sum = 0;
			double avg = 0.0;
			
			//작성 위치
			
			System.out.println("sum : " + sum);
			System.out.println("avg : " + avg);
		}
	}
	
9. 다음은 키보드로부터 학생 수와 각 학생들의 점수를 입력받아서, 최고 점수 및 평균 점수를 구하는 프로그램입니다.
    실행 결과를 보고, 알맞게 작성해보세요(참고로 Scanner의 nextInt() 메소드는 콘솔에 입력된 숫자를 읽고 리턴합니다).
    
	Exercise09.java
	--------------------------------------------------
	import java.util.Scanner;

	public class Excercise09 {
		public static void main(String[] args) {
			boolean run = true;
			int studentNum = 0;
			int[] scores = null;
			Scanner scanner = new Scanner(System.in);
			
			while(run) {
				System.out.println("------------------------------------------");
				System.out.println("1.학생수 | 2.점수입력 | 3.점수리스트 | 4.분석 | 5.종료");
				System.out.println("------------------------------------------");
				System.out.print("선택 > ");
				
				int selectNo = scanner.nextInt();
				
				if(selectNo == 1) {
					//작성 위치
				} else if(selectNO == 2) {
					//작성 위치
				} else if(selectNO == 3) {
					//작성 위치
				} else if(selectNO == 4) {
					//작성 위치
				} else if(selectNO == 5) {
					run = false;
				}
			}
			
			System.out.println("포로그램 종료");
		}
	}

----------------------------------------------------------------------------------------------------------------------------------------

확인 문제 정답

1. 4)
2. 3)
3. 2)
4. 2)
5. 3)
6. 3, 5
7. 
	public class Exercise07 {
		public static void main(String[] args) {
		    int max = 0;
	    	int[] array = { 1, 5, 3, 8, 2 };
		 
			for(int i=0; i<array.length; i++) {
				if(max<array[i]) {
					max = array[i];
				}
			}
	
	    	System.out.println("max: " + max);
		}
	}

8.
	public class Exercise08 {
		public static void main(String[] args) {
			int[][] array = { 
					{95, 86},
					{83, 92, 96},
					{78, 83, 93, 87, 88}
			};	
	
			int sum = 0;
			double avg = 0.0;
	
			int count = 0;
			for(int i=0; i<array.length; i++) {
				for(int j=0; j<array[i].length; j++) {
					sum += array[i][j];
					count++;
				}
			}
			avg = (double) sum / count;
	
			System.out.println("sum: " + sum);
			System.out.println("avg: " + avg);
		}
	}
	
9.
	import java.util.Scanner;

	public class Exercise09 {
		public static void main(String[] args) {
			boolean run = true;		
			
			int studentNum = 0;
			int[] scores = null;
			
			Scanner scanner = new Scanner(System.in);
			
			while(run) {
				System.out.println("--------------------------------------------------------------");
				System.out.println("1.학생수 | 2.점수입력 | 3.점수리스트 | 4.분석 | 5.종료");
				System.out.println("--------------------------------------------------------------");
				System.out.print("선택> ");
				
				int selectNo = scanner.nextInt();
				
				if(selectNo == 1) {
					System.out.print("학생수> ");
					studentNum = scanner.nextInt();
					scores = new int[studentNum];
				} else if(selectNo == 2) {
					for(int i=0; i<scores.length; i++) {
						System.out.print("scores[" + i + "]> ");
						scores[i] = scanner.nextInt();
					}
				} else if(selectNo == 3) {
					for(int i=0; i<scores.length; i++) {
						System.out.println("scores[" + i + "]: " + scores[i]);
					}
				} else if(selectNo == 4) {
					int max = 0;
					int sum = 0;
					double avg = 0;
					for(int i=0; i<scores.length; i++) {
						max = (max<scores[i])? scores[i] : max;
						sum += scores[i];
					}
					avg = (double) sum / studentNum;
					System.out.println("최고 점수: " + max);
					System.out.println("평균 점수: " + avg);
				} else if(selectNo == 5) {
					run = false;
				}
			}	
			
			System.out.println("프로그램 종료");
		}
	}
