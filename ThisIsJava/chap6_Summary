클래스

1. 객체 지향 프로그래밍

	1.1 객체란?
		
		- 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성을 가지고 있고 다른 것과 식별 가능한 것
		- 이러한 객체의 속성을 필드(field), 동작을 메소드(method)라 부름
		
	1.2 객체의 상호작용
	
		- 객체들 간 상호작용 수단은 메소드
			리턴값 = 객체.메소드(매개값1, 매개값2, ... );
			
			int result = Calculator.add(10, 20);
			
	1.3 객체 간의 관계
	
		- 집합 관계, 사용 관계, 상속 관계가 있음
	
	1.4 객체 지향 프로그래밍의 특징
	
		- 캡슐화(Encapsulation)
			객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것
			외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있음
			
			외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하기 위함
			
			자바에서는 접근 제한자(Access Modifier)를 사용하여 캡슐화
			
		- 상속(Inheritance)
			상위 객체가 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 함
			
			상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고, 반복된 코드의 중복을 줄여줌
			
			상위 객체의 수정으로 모든 하위 객체들의 수정 효과를 가져오므로 유지 보수 시간을 최소화시켜줌
			
		- 다형성(Polymorphism)
			같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질
			
			자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용함
			
2. 객체와 클래스

	- 메모리에서 사용하고 싶은 객체가 있다면 설계도(클래스)로 해당 객체를 만드는 작업이 필요함
	- 클래스에는 객체를 생성하기 위한 필드와 메소드가 정의되어 있음
	- 클래스로부터 만들어진 객체를 해당 클래스의 인스턴스(Instance)라고 함
	
	- 하나의 클래스로 여러 개의 인스턴스를 만들 수 있는데 이는 하나의 설게도로 여러 대의 자동차를 만드는 것과 동일함
	
	- 클래스 설계 > 객체 생성 > 객체 사용
	
	- main() 메소드가 없는 클래스는 객체 생성 과정을 거쳐 사용해야 함
	
3. 클래스 선언

	- 클래스 이름은 다른 클래스와 식별할 목적으로 사용되므로 자바의 식별자 작성 규칙에 따라서 만들어야 함
		하나 이상의 문자로 이루어져야 한다.
		첫 번째 글자는 숫자가 올 수 없다.
		$, _ 외의 특수 문자는 사용할 수 없다.
		자바 키워드는 사용할 수 없다.
		
	- 영어로 작성하되, 첫 글자는 대문자로 작성하는 것이 관례
	
	- 클래스 이름과 소스 파일 이름은 일치해야 함
	
	- 기본적인 클래스 선언
		public class 클래스 이름 {
		
		}
		public class 부분은 반드시 소문자로 작성해야 함
		중괄호는 클래스의 시작({)과 끝(})을 나타냄
		
	- 일반적으로 소스 파일당 하나의 클래스를 선언하지만 두 개 이상의 클래스 선언도 가능함
		가급적 소스 파일 하나당 클래스 하나를 선언하는 것이 좋음
	- 파일 이름과 동일한 이름의 클래스 선언에만 public 접근 제한자를 붙일 수 있음
	 	
4. 객체 생성과 클래스 변수

	- 클래스로부터 객체를 생성하는 방법은 다음과 같이 new 연산자를 사용
		new 클래스();
		
		new 는 클래스로부터 객체를 생성시키는 연산자
		new 연산자 뒤에는 생성자가 오는데, 생성자는 클래스() 형태를 가지고 있음
		new 연산자로 생성된 객체는 메모리 힙(heap) 영역에 생성됨
			힙 영역에 객체를 생성한 후, 객체의 주소를 리턴함
			이 주소를 참조 타입 변수인 클래스 변수에 저장해 두면, 변수를 통해 객체를 사용할 수 있음
			
		클래스 변수;
		변수 = new 클래스();
		
		클래스 변수 = new 클래스();
		
	- 클래스는 라이브러리(API)용과 실행용이 있음
		라이브러리 클래스 : 다른 클래스에서 이용할 목적으로 설계됨
		실행용 클래스 : main() 메소드를 제공하는 역할
		
5. 클래스의 구성 멤버

	- 클래스에는 객체가 가져야 할 구성 멤버가 선언됨
		필드(Field)
		생성자(Constructor)
		메소드(Method)
		
	5.1 필드
		
		- 객체의 고유 데이터, 부품 객체, 상태 정보를 저장
		- 선언 형태는 변수(variable)와 비슷하지만, 필드를 변수라고 부르지 않음
			변수는 생성자와 메소드 내에서만 사용되고 생성자와 메소드가 실행 종료되면 자동 소멸됨
			필드는 생성자와 메소드 전체에서 사용되며 객체가 소멸되지 않는 한 객체와 함께 존재함
			
	5.2 생성자
	
		- new 연산자로 호출되는 특별한 중괄호 {} 블록
		- 객체 생성 시 초기화를 담당
		- 메소드와 비슷하게 생겼지만, 클래스 이름으로 되어 있고 리턴 타입이 없음
		
	5.3 메소드
	
		- 객체의 동작에 해당하는 중괄호 {} 블록
		- 메소드를 호출하면 중괄호 블록에 있는 모든 코드들이 일괄적으로 실행됨
		- 메소드는 객체 간의 데이터 전달의 수단으로 사용됨
			외부로부터 매개값을 받을 수도 있고, 어떤 값을 리턴할 수도 있음
			
6. 필드

	6.1 필드 선언
	
		- 필드 선언은 클래스 중괄호 {} 블록 어디서든 존재할 수 있음
			생성자와 메소드 중괄호 블록 내부에는 선언할 수 없음(로컬 변수가 됨)
			
		- 변수 선언 형태와 비슷하여 클래스 멤버 변수라고 부르기도 함
			타입 필드 = 초기값 ;
			
		- 초기값이 지정되지 않은 필드들은 객체 생성 시 자동으로 기본 초기값으로 설정됨
		
	6.2 필드 사용
	
		- 클래스 내부의 생성자나 메소드에서 사용할 경우 단순히 필드 이름으로 읽고 변경하면 됨
		- 클래스 외부에서 사용할 경우 우선적으로 클래스로부터 객체를 생성한 뒤 필드를 사용해야 함
			필드는 객체에 소속된 데이터이므로 객체가 존재하지 않으면 필드도 존재하지 않기 때문
			
7. 생성자

	7.1 기본 생성자
	
		- 모든 클래스는 생성자가 반드시 존재하며, 하나 이상을 가질 수 있음
			생성자 선언을 생략했다면 컴파일러는 기본 생성자를 바이트 코드에 자동 추가시킴
			클래스() {};
			
			따라서 생성자를 선언하지 않아도 다음과 같이 new 연산자 뒤에 기본 생성자를 호출해서 객체를 생성시킬 수 있음
			Car myCar = new Car();
		
		- 클래스에 명시적으로 선언한 생성자가 한 개라도 있으면, 컴파일러는 기본 생성자를 추가하지 않음
		
	7.2 생성자 선언
	
		- 생성자 선언
			클래스( 매개변수선언, ... ) {
				객체의 초기화 코드
			}
			
			메소드와 비슷한 모양을 가지고 있으나, 리턴 타입이 없고 클래스 이름과 동일함
			
			매개변수선언 개수에 따라서 해당하는 생성자가 필요함
			
	7.3 필드 초기화
	
		- 클래스로부터 객체가 생성될 때 필드는 기본 초기값으로 자동 설정됨
			다른 값으로 초기화하고 싶다면
				필드를 선언할 때 초기값을 주거나
				생성자에서 초기값을 주면 됨
				
		- 필드 선언할 때 초기값을 주면 동일한 클래스로부터 생성되는 객체들은 모두 같은 데이터를 갖게 됨
		- 객체 생성 시점에 외부에서 제공하는 다양한 값들로 초기화해야 한다면 생성자에서 초기화
		
		- 생성자 안에서 필드를 초기화할 때 관례적으로 필드 이름과 매개변수 이름을 동일하게 함
			이 경우 매개변수가 우선순위가 높아서 생성자 내부에서는 객체의 필드에 접근할 수 없음
			이 때 this. 를 이용해서 객체 자신의 필드에 접근할 수 있도록 함
			public Korean(String name, String ssn) {
				this.name = name;
				this.ssn = ssn;
			}
			
	7.4 생성자 오버로딩(Overloading)
		
		- 매개 변수를 달리하는 생성자를 여러 개 선언하는 것
		
	7.5 다른 생성자 호출(this())
	
		- 생성자 오버로딩이 많아질 경우 생성자 간의 중복된 코드가 발생할 수 있음
			필드 초기화 내용은 한 생성자에만 집중적으로 작성하고 나머지 생성자는 초기화 내용을 가지고 있는 생성자를 호출
			클래스( 매개변수선언, ... ) {
				this( 매개변수, ..., 값, ... );
				실행문;
			}
			
8. 메소드

	8.1 메소드 선언
	
		- 선언부(리턴타입, 메소드이름, 매개변수선언)와 실행 블록으로 구성
			선언부를 메소드 시그니처 라고도 함
			
		- 리턴 타입
			메소드가 실행 후 리턴하는 값의 타입
			메소드는 리턴 값이 있을 수도 있고 없을 수도 있음
			리턴 값이 없는 메소드는 타입에 void, 리턴값이 있는 메소드는 리턴 타입이 와야 함
			
			리턴 값 없는 메소드는 그냥 실행, 있는 메소드는 변수에 저장
			
		- 메소드 이름
			숫자로 시작하면 안 되고, $와 _를 제외한 특수 문자를 사용하지 않아야 함
			관례적으로 메소드명은 소문자로 작성
			서로 다른 단어가 혼합된 이름이라면 뒤이어 오는 단어의 첫머리 글자는 대문자로 작성
			
		- 매개 변수 선언
			메소드가 실행될 때 필요한 데이터를 외부로부터 받기 위해 사용
		
		- 매개 변수의 수를 모를 경우
			여러 개의 수를 모두 합산하는 메소드와 같이 매개 변수 수를 알 수 없는 경우 배열 타입으로 선언
				이 경우 메소드 호출 전에 배열을 선언해야 함
			배열을 선언하지 않고 값의 리스트만 넘겨주기 위해 ... 매개변수를 사용
			
	8.2 리턴(return)문
	
		- 리턴값이 있는 메소드
			메소드 선언에 리턴 타입이 있는 메소드는 반드시 리턴(return)문을 사용해서 리턴값을 지정해야 함
			return 리턴값;
			
			리턴값은 리턴 타입이거나 리턴 타입으로 변환될 수 있어야 함
			return문 이후의 실행문은 실행되지 않음
			
		- 리턴값이 없는 메소드(void)
			void로 선언된 리턴값이 없는 메소드에서도 return문을 사용해 메소드를 종료 시킬 수 있음
			return;
			
	8.3 메소드 호출
		
		- 객체 내부에서 호출
			클래스 내부에서 다른 메소드를 호출할 때
			메소드( 매개값, ... );
			
			리턴값이 있는 메소드를 호출하고 리턴값을 받고 싶을 때
			타입 변수 = 메소드( 매개값, ... );
			
		- 객체 외부에서 호출
			외부 클래스에서 메소드를 호출하려면 우선 클래스로부터 객체를 생성해야 함
			메소드는 객체에 소속된 멤버이므로 객체가 존재하지 않으면 메소드도 존재하지 않기 때문
			클래스 참조변수 = new 클래스( 매개값, ... );
			타입 변수 = 참조변수.메소드( 매개값, ... );
			
	8.4 메소드 오버로딩
	
		- 클래스 내에 같은 이름의 메소드를 여러 개 선언하는 것
			매개 변수의 타입, 개수, 순서 등이 달라야 함(JVM이 매개값의 타입을 보고 호출할 메소드를 선택하기 때문)
			다양한 매개값을 받아 처리할 수 있도록 하기 위함
			
9. 인스턴스 멤버와 this
	
	- 인스턴스(Instance) 멤버란 객체를 생성한 후 사용할 수 있는 필드와 메소드를 말함
		객체 내부에서 인스턴스 멤버에 접근하기 위해 this를 사용
		
10. 정적 멤버와 static

	- 정적 멤버는 클래스에 고정된 멤버로서 객체를 생성하지 않고 사용할 수 있는 필드와 메소드를 말함
		객체에 소속된 멤버가 아니라 클래스에 소속된 멤버이기 때문에 클래스 멤버라고도 함
		
	10.1 정적 멤버 선언
		
		- 필드와 메소드 선언 시 static 키워드를 추가
			public class 클래스 {
				static 타입 필드 = 초기값;
				static 리턴 타입 메소드( 매개변수선언, ... ){};
			}
			
		- 정적 필드와 정적 메소드는 클래스에 고정된 멤버이므로 클래스 로더가 클래스를 로딩해서 메소드 메모리 영역에 적재할 때 클래스별로 관리됨
			로딩이 끝나면 바로 사용할 수 있음
			
		- 객체마다 가지고 있어야 할 데이터라면 인스턴스 필드로 선언, 공용 데이터라면 정적 필드로 선언
		- 인스턴스 필드를 이용해서 실행해야 한다면 인스턴스 메소드로 선언, 아니라면 정적 메소드로 선언
		
	10.2 정적 멤버 사용
	
		- 클래스 이름과 함께 도트(.) 연산자로 접근
			클래스.필드;
			클래스.메소드( 매개값, ... );
			
	10.3 정적 초기화 블록
	
		- 정적 필드는 선언과 동시에 초기값을 주는 것이 보통임
			자바는 정적 필드의 초기화 작업을 위해서 정적 블록을 제공함
			static {
				...
			}
			
			정적 블록은 클래스가 메모리로 로딩될 때 자동으로 실행됨
			클래스 내부에 여러 개가 선언되어도 상관없음
			선언된 순서대로 실행됨
		
	10.4 정적 메소드와 블록 선언 시 주의할 점
	
		- 객체가 없어도 실행된다는 특징 때문에, 이들 내부에 인스턴스 필드나 인스턴스 메소드를 사용할 수 없음
		- 객체 자신의 참조인 this 키워드도 사용 불가능
		
		- 정적 메소드와 정적 블록에서 인스턴스 멤버를 사용하고 싶다면 다음과 같이 객체를 먼저 생성하고 참조 변수로 접근해야 함
			static void Method3() {
				ClassName obj = new ClassName();
				obj.field1 = 10;
				obj.method1();
			}
			
	10.5 싱글톤(Singleton)
		
		- 전체 프로그램에서 단 하나의 객체만 만들도록 보장해야 하는 경우가 있음
			이 객체를 싱글톤 이라고 함
			
		- 싱글톤을 만들려면 클래스 외부에서 new 연산자로 생성자를 호출할 수 없도록 막아야 함
			생성자를 외부에서 호출할 수 없도록 하려면 생성자 앞에 private 접근 제한자를 붙여주면 됨
			그리고 자신의 타입인 정적 필드를 하나 선언하고자신의 객체를 생성해 초기화함
				클래스 내부에서는 new 연산자로 생성자 호출이 가능함
			정적 필드도 private 접근 제한자를 붙여 외부에서 필드값을 변경하지 못하도록 막음
			외부에서 호출할 수 있는 정적 메소드인 getInstance()를 선언하고 정적 필드에서 참조하고 있는 자신의 객체를 리턴해 줌
			public class 클래스 {
				private static 클래스 singleton = new 클래스();
				
				private 클래스() {}
				
				static 클래스 getInstance() {
					return singleton;
				}
			}
			
			getInstance() 메소드는 단 하나의 객체만 리턴하기 때문에 아래 코드에서 변수1과 변수2는 동일한 객체를 참조함
			클래스 변수1 = new 클래스.getInstance();
			클래스 변수2 = new 클래스.getInstance();
			
11. final 필드와 상수
	
	11.1 final 필드
	
		- 초기값이 저장되면 프로그램 실행 도중에 수정할 수 없음
			final 타입 필드  = 초기값;
			
			초기값을 줄 수 있는 방법은 딱 두가지 뿐
				필드 선언 시에 주는 방법
				생성자에서 주는 방법
				
			초기화하지 않은 final 필드를 그대로 남겨두면 컴파일 에러가 발생함
			
	11.2 상수(static final)
	
		- final 필드는 객체마다 저장되고, 생성자의 매개값을 통해서 여러 가지 값을 가질 수 있기 때문에 상수가 될 수 없음
		- 상수 선언은 static final 이어야 함
			객체마다 저장되지 않고, 클래스에만 포함됨
			한 번 초기값이 저장되면 변경할 수 없음
			static final 타입 상수 = 초기값;
			
			정적 블록에서도 초기화 가능
			
		- 상수 이름은 모두 대문자로 작성하는 것이 관례
			서로 다른 단어가 혼합된 경우 밑줄(_)로 단어들을 연결
			
12. 패키지

	- 프로젝트를 개발하다 보면 적게는 수십 개, 많게는 수백 개의 클래스를 작성해야 함
	- 클래스를 체계적으로 관리하기 위해 패키지(package)를 사용
		물리적인 형태는 파일 시스템의 폴더
	
	- 패키지는 클래스를 유일하게 만들어주는 식별자 역할을 함
		클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식함
		패키지가 상, 하위로 구분되어 있다면 도트(.)를 사용해서 다음과 같이 표현
		상위패키지.하위패키지.클래스
		
	12.1 패키지 선언
		
		- 패키지는 클래스를 컴파일하는 과정에서 자동적으로 생성되는 폴더
			package 상위패키지.하위패키지;
			
			public class ClassName {}
			
		- 패키지 이름
			숫자로 시작해서는 안 되고, $와 _를 제외한 특수 문자를 사용해서는 안 된다.
			java로 시작하는 패키지는 자바 표준 API에서만 사용하므로 사용해서는 안 된다.
			모두 소문자로 작성하는 것이 관례이다.
			
			패키지 중복을 피하기 위해 일반적으로 회사 도메인을 역순으로 패키지 이름으로 하게 됨
			
	12.2 패키지 선언이 포함된 클래스 컴파일
	
		- 패키지 선언이 포함된 클래스를 명령 프롬프트에서 컴파일 할 경우, -d 옵션을 추가하고 경로를 지정해야 함
		
	12.3 이클립스에서 패키지 생성과 클래스 생성
	
		- 프로젝트의 src 폴더를 선택하고
			File - New - Package
			상위 패키지와 하위 패키지를 도트(.)로 구분해서 입력하고 Finish
			
		- 해당 패키지를 선택하고
			File - New - Class
			
	12.4 import문
	
		- 같은 패키지에 속하는 클래스들은 아무런 조건 없이 다른 클래스를 사용할 수 있음
		- 다른 패키지에 속하는 클래스를 사용하려면 
			패키지와 클래스를 모두 기술하거나
			import문을 이용
			
			사용하고자 하는 패키지를 import문으로 선언하고, 클래스를 사용할 때에는 패키지를 생략
			
			import문이 작성되는 위치는 패키지 선언과 클래스 선언 사이
			
			서로 다른 패키지에 동일한 클래스 이름이 존재하고 둘 모두 import 된 경우 패키지 이름 전체를 기술해야 함
			
13. 접근 제한자

	- 라이브러리 클래스를 설계할 때에는 외부 클래스에서 접근할 수 있는 멤버와 접근할 수 없는 멤버로 구분해서 필드, 생성자, 메소들르 설계
		이러한 기능을 구현하기 위해 접근 제한자(Access Modifier)를 제공
		
		접근 제한자		적용 대상						접근할 수 없는 클래스
	-----------------------------------------------------------------------------------------------
		public		클래스, 필드, 생성자, 메소드		없음
		protected	필드, 생성자, 메소드				자식 클래스가 아닌 다른 패키지에 소속된 클래스
		default		클래스, 필드, 생성자, 메소드		다른 패키지에 소속된 클래스
		private		필드, 생성자, 메소드				모든 외부 클래스
		
	13.1 클래스의 접근 제한
	
		- 클래스를 선언할 때 고려해야 할 사항은 같은 패키지 내에서만 사용할 것인지, 다른 패키지에서도 사용할 수 있도록 할 것인지
			클래스에 사용할 수 있는 접근 제한자는 default와 public
			class 클래스 {}			- default
			
			public class 클래스 {}		- public
			
		- default 접근 제한
			같은 패키지에서는 아무 제한 없이 사용할 수 있지만 다른 패키지에서는 사용할 수 없음
			
		- public 접근 제한
			같은 패키지 뿐만 아니라 다른 패키지에서도 아무런 제한 없이 사용할 수 있음
			
	13.2 생성자의 접근 제한
	
		- 객체를 생성하기 위해서는 new 연산자로 생성자를 호출해야 함
			생성자가 호출될 때 적용되는 접근 제한은 public. protected, default, private
			public class ClassName {
				public ClassName() {}		- public
				protected ClassName() {}	- protected
				ClassName() {}				- default
				private ClassName() {}		- private
			}
			
			클래스에 생성자를 선언하지 않았을 때 자동으로 생성되는 기본 생성자는 클래스의 접근 제한과 동일함
			
			접근 제한자			생성자		설명
		-------------------------------------------------------------------------------------------
			public			클래스()		모든 패키지에서 호출 가능
										클래스가 default 접근 제한을 가진다면 클래스 접근이 같은 패키지로 한정되므로
										같은 패키지에서만 생성자를 호출할 수 있음
			
			protected		클래스()		같은 패키지에 속하는 클래스에서 생성자를 호출 가능
										다른 패키지에 속한 클래스가 해당 클래스의 자식 클래스라면 생성자 호출 가능
										
			default			클래스()		같은 패키지에서만 생성자 호출 가능
			
			private			클래스()		동일 패키지에서도 생성자를 호출하지 못함
										클래스 내부에서만 new 연산자로 객체를 만들 수 있음
										
	13.3 필드와 메소드의 접근 제한
	
		- 필드와 메소드를 선언할 때 고려 사항은 클래스 내부에서만 사용할 것인지, 패키지 내에서만 사용할 것인지, 다른 패키지에서도 사용할 것인지
			public, protected, default, private

			접근 제한자			생성자		설명
		-------------------------------------------------------------------------------------------
			public			필드			모든 패키지에서 필드와 메소드 사용 가능
							메소드()		클래스가 default 접근 제한을 가진다면 클래스 접근이 같은 패키지로 한정되므로
										같은 패키지에서만 사용 가능
			
			protected		필드			같은 패키지에 속하는 클래스에서 필드와 메소드 사용 가능
							메소드()		다른 패키지에 속한 클래스가 해당 클래스의 자식 클래스라면 필드와 메소드 사용 가능
										
			default			필드			같은 패키지에서만 필드와 메소드 사용 가능
							메소드()		
			
			private			필드			클래스 내부에서만 필드와 메소드 사용 가능
							메소드()		
							
14. Getter와 Setter 메소드

	- 일반적으로 객체 지향 프로그래밍에서 객체의 데이터는 객체 외부에서 직접적으로 접근하는 것을 막음
		객체의 데이터를 외부에서 마음대로 읽고 변경할 경우 무결성이 깨질 수 있기 때문
		따라서 메소드를 통해서 데이터를 변경하는 방법을 선호함
		
		데이터는 외부에서 접근할 수 없도록 막고, 메소드는 공개
			매개값을 검증해서 유효한 값만 데이터로 저장할 수 있기 때문
			이러한 역할을 하는 메소드가 Setter()
			
		외부에서 데이터를 읽을 때도 메소드를 사용
			객체 외부에서 객체의 필드값을 사용하기 부적절한 경우
			메소드로 필드값을 가공해서 외부로 전달
			이러한 역할을 하는 메소드가 Getter()
			
	- 클래스를 선언할 때 가능하다면 필드를 private으로 선언해서 외부로부터 보호하고, 필드에 대한 Setter와 Getter 메소드를 작성해서 사용
		private 타입 fieldName;
		
		public 리턴 타입 getFieldName() {					- Getter
			return fieldName;
		}
		
		public 리턴 타입 setFieldName(타입 fieldName) {		- Setter
			this.fieldName = fieldName;
		}
		
		필드 타입이 boolean일 경우 Getter는 get으로 시작하지 않고 is로 시작하는 것이 관례
			isStop() {}
			
	- 이클립스에서 자동으로 선언된 필드에 대해 Getter와 Setter 메소드를 생성시키기
		필드를 선언한 후
			Source - Generate Getters and Setters
			
15. 어노테이션

	- 어노테이션(Annotation)은 메타데이터라고 볼 수 있음
		@AnnotationName
		
	- 용도
		컴파일러에게 코드 문법 에러를 체크하도록 정보를 제공
		소프트웨어 개발 툴이 빌드나 배피 시 코드를 자동으로 생성할 수 있도록 정보를 제공
		실행 시 특정 기능을 실행하도록 정보를 제공
		
	15.1 어노테이션 타입 정의와 적용
	
		- 어노테이션 타입 정의는 인터페이스를 정의하는 것과 유사
			public @interface AnnotationName {
			
			}
		
			이렇게 정의한 어노테이션은 코드에서 다음과 같이 사용
			@AnnotationName
			
		- 어노테이션은 엘리먼트(element)를 멤버로 가질 수 있음
			각 엘리먼트는 타입과 이름으로 구성되며, 디폴트 값을 가질 수 있음
			public @interface AnnotationName {
				타입 elementName() default값;
			}
			
			public @interface AnnotationName {
				String elementName1();
				int elementName2() default 5;
			}
			
			적용
			@AnnotationName(elementName1="값", elementName2=3);
				또는
			@AnnotationName(elementName1="값");
				elementName1은 default 값이 없기 때문에 반드시 값을 기술해야 함
				
	15.2 어노테이션 적용 대상
	
		- 어노테이션을 적용할 수 있는 대상은 java.lang.annotation.ElementType 열거 상수로 정의됨
		
			ElementType 열거 상수				적용 대상
		-------------------------------------------------------------------------------
			TYPE							클래스, 인터페이스, 열거 타입
			ANNOTATION_TYPE					어노테이션
			FIELD							필드
			CONSTRUCTOR						생성자
			METHOD							메소드
			LOCAL_VARIABLE					로컬 변수
			PACKAGE							패키지
			
		- 대상을 지정할 때에는 @Target 어노테이션을 사용
			@Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})
			public @interface AnnotationName {}
			
			이 경우 생성자는 적용할 수 없음
			
			@AnnotationName
			public class ClassName {
				@AnnotationName
				private String fieldName;
				
				@AnnotationName
				public ClassName() {}
				
				@AnnotaitonName
				public void methodName() {}
			}
			
	15.3 어노테이션 유지 정책
	
		- 사용 용도에 따라 어느 범위까지 유지할 것인지 지정
			유지 정책은 java.lang.annotation.RetentionPolicy 열거 상수로 정의됨
			
			RetentionPolicy 열거 상수		설명
		---------------------------------------------------------------------------------------
			SOURCE						소스상에서만 어노테이션 정보를 유지
										소스 코드를 분석할 때만 의미가 있으며, 바이트 코드 파일에는 정보가 남지 않음
			
			CLASS						바이트 코드 파일까지 어노테이션 정보를 유지
										리플렉션을 이용해서 어노테이션 정보를 얻을 수는 없음
										
			RUNTIME						바이트 코드 파일까지 어노테이션 정보를 유지하면서
										리플렉션을 이용해서 런타임 시에 어노테이션 정보를 얻을 수 있음
										
			리플렉션이란 런타임 시에 클래스의 메타 정보를 얻는 기능
			
		- 런타임 정책을 적용한 어노테이션
			@Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})
			@Retention(RetentionPolicy.RUNTIME)
			public @interface AnnotationName {}
			
	15.4 런타임 시 어노테이션 정보 사용하기
	
		- 어노테이션 자체는 아무런 동작을 가지지 않는 단지 표식일 뿐이지만, 리플렉션을 이용해서 어노테이션의 적용 여부와 엘리먼트 값을 읽고 처리할 수 있음
		
		- 클래스에 적용된 어노테이션 정보를 얻으려면 java.lang.Class
		- 필드, 생성자, 메소드에 적용된 어노테이션 정볼르 얻으려면 Class의 다음 메소드를 통해서
			java.lang.reflect 패키지의 Field, Constructor, Method 타입의 배열을 얻어야 함
			
			리턴 타입			메소드명(매개 변수)		설명
		-----------------------------------------------------------------------------
			Field[]			getField()			필드 정보를 Field 배열로 리턴
			Constructor[]	getConstructor()	생성자 정보를 Constructor 배열로 리턴
			Method[]		getDeclaredMethod()	메소드 정보를 Method 배열로 리턴
			
			그런 다음 Class, Field, Constructor, Method가 가지고 있는 다음 메소드를 호출해서 적용된 어노테이션 정보 얻을 수 있음
			
			리턴 타입			메소드병(매개변수)
		----------------------------------------------------------------------------------------
			boolean			isAnnotationPresent(Class<? extends Annotation> annotationClass)
							지정한 어노테이션이 적용되었는지 여부. Class에서 호출했을 때 상위 클래스에 적용된 경우에도
							true를 리턴한다.
			
		 	Annotation		getAnnotation(Class<T> annotationClass)
		 					지정한 어노테이션이 적용되어 있으면 어노테이션을 리턴하고 그렇지 않다면 null을 리턴한다.
		 					Class에서 호출했을 때 상위 클래스에 적용된 경우에도 어노테이션을 리턴한다.
		 					
		 	Annotation[]	getAnnotations()
		 					적용된 모든 어노테이션을 리턴한다. Class에서 호출했을 때 상위 클래스에 적용된 어노테이션도
		 					모두 포함한다. 적용된 어노테이션이 없을 경우 길이가 0인 배열을 리턴한다.
		 					
		 	Annotation[]	getDeclareAnnotations()
		 					직접 적용된 모든 어노테이션을 리턴한다. Class에서 호출했을 때 상위 클래스에 적용된 어노테이션은
		 					포함되지 않는다.
		 					
----------------------------------------------------------------------------------------------------------------------------------------

확인 문제

1. 객체와 클래스에 대한 설명으로 틀린 것은 무엇입니까?

	1) 클래스는 객체를 생성하기 위한 설계도(청사진)와 같은 것이다.
	2) new 연산자로 클래스의 생성자를 호출함으로써 객체가 생성된다.
	3) 하나의 클래스로 하나의 객체만 생성할 수 있다.
	4) 객체는 클래스의 인스턴스이다.
	
2. 클래스의 구성 멤버가 아닌 것은 무엇입니까?
	
	1) 필드(field)
	2) 생성자(constructor)
	3) 메소드(method)
	4) 로컬 변수(local variable)
	
3. 필드, 생성자, 메소드에 대한 설명으로 틀린 것은 무엇입니까?

	1) 필드는 객체의 데이터를 저장한다.
	2) 생성자는 객체의 초기화를 담당한다.
	3) 메소드는 객체의 동작 부분으로, 실행 코드를 가지고 있는 블록이다.
	4) 클래스는 반드시 필드와 메소드를 가져야 한다.
	
4. 필드에 대한 설명으로 틀린 것은 무엇입니까?

	1) 필드는 메소드에서 사용할 수 있다.
	2) 인스턴스 필드 초기화는 생성자에서 할 수 있다.
	3) 필드는 반드시 생성자 선언 전에 선언되어야 한다.
	4) 필드는 초기값을 주지 않더라도 기본값으로 자동 초기화된다.
	
5. 생성자에 대한 설명으로 틀린 것은 무엇입니까?

	1) 객체를 생성하려면 생성자 호출이 반드시 필요한 것은 아니다.
	2) 생성자는 다른 생성자를 호출하기 위해 this()를 사용할 수 있다.
	3) 생성자가 선언되지 않으면 컴파일러가 기본 생성자를 추가한다.
	4) 외부에서 객체를 생성할 수 없도록 생성자에 private 접근 제한자를 붙일 수 있다.
	
6. 메소드에 대한 설명으로 틀린 것은 무엇입니까?

	1) 리턴값이 없는 메소드는 리턴 타입을 void로 해야 한다.
	2) 리턴 타입이 있는 메소드는 리턴값을 저장하기 위해 반드시 return문이 있어야 한다.
	3) 매개값의 수를 모를 경우 "..."를 이용해서 매개 변수를 선언할 수 있다.
	4) 메소드의 이름은 중복해서 선언할 수 없다.
	
7. 메소드 오버로딩에 대한 설명으로 틀린 것은 무엇입니까?

	1) 동일한 이름의 메소드를 여러 개 선언하는 것을 말한다.
	2) 반드시 리턴 타입이 달라야 한다.
	3) 매개 변수의 타입, 수, 순서를 다르게 선언해야 한다.
	4) 매개값의 타입 및 수에 따라 호출될 메소드가 선택된다.

8. 인스턴스 멤버와 정적 멤버에 대한 설명으로 틀린 것은 무엇입니까?

	1) 정적 멤버는 static으로 선언된 필드와 메소드를 말한다.
	2) 인스턴스 필드는 생성자 및 정적 블록에서 초기화될 수 있다.
	3) 정적 필드와 정적 메소드는 객체 생성 없이 클래스를 통해 접근할 수 있다.
	4) 인스턴스 필드와 메소드는 객체를 생성하고 사용해야 한다.
	
9. final 필드와 상수(static final)에 대한 설명으로 틀린 것은 무엇입니까?

	1) final 필드와 상수는 초기값이 저장되면 값을 변경할 수 없다.
	2) final 필드와 상수는 생성자에서 초기화될 수 있다.
	3) 상수의 이름은 대문자로 작성하는 것이 관례이다.
	4) 상수는 객체 생성 없이 클래스를 통해 사용할 수 있다.
	
10. 패키지에 대한 설명으로 틀린 것은 무엇입니까?
	
	1) 패키지는 클래스들을 그룹화시키는 기능을 한다.
	2) 클래스가 패키지에 소속되려면 패키지 선언을 반드시 해야 한다.
	3) import문은 다른 패키지의 클래스를 사용할 때 필요하다.
	4) mycompany 패키지에 소속된 클래스는 yourcompany에 옮겨 놓아도 동작한다.

11. 접근 제한에 대한 설명으로 틀린 것은 무엇입니까?

	1) 접근 제한자는 클래스, 필드, 생성자, 메소드의 사용을 제한한다.
	2) public 접근 제한은 아무런 제한 없이 해당 요소를 사용할 수 있게 한다.
	3) default 접근 제한은 해당 클래스 내부에서만 사용을 허가한다.
	4) 외부에서 접근하지 못하도록 하려면 private 접근 제한을 해야 한다.

12. 다음 클래스에서 해당 멤버가 필드, 생성자, 메소드 중 어떤 것인지 빈칸을 채우세요.

	public class Member {
		private String name;						- [				]
		
		public Member(String name) { }				- [				]
		
		public void setName(String name) { }		- [				]
	
	}
	
13. 현실 세계의 회원을 Member 클래스로 모델링하려고 합니다. 회원의 데이터로는 이름, 아이디, 패스워드, 나이가 있습니다.
	이 데이터들을 가지는 Member 클래스를 선언해보세요.

		데이터 이름				필드 이름				타입
	----------------------------------------------------------------------
		이름					name				문자열
		아이디				id					문자열
		패스워드				password			문자열
		나이					age					정수
		
	Member.java
	----------------------------------------------------------
	public class Member {
		//작성 위치
	}

14. 위에서 작성한 Member 클래스에 생성자를 추가하려고 합니다. 다음과 같이 Member 객체를 생성할 때 name 필드와 id 필드를 
	외부에서 받은 값으로 초기화하려면 생성자를 어떻게 선언해야 합니까?
	
	Member user1 = new Member("홍길동", "hong");
	Member user2 = new Member("강자바", "java");
	
	Member.java
	----------------------------------------------------------
	public class Member {
		//작성 위치
	}

15. MemberService 클래스에 login() 메소드와 logout() 메소드를 선언하려고 합니다. login() 메소드를 호출할 때에는
	매개값으로 id와 password를 제공하고, logout() 메소드는 id만 매개값으로 제공합니다. MemberService 클래스와 login(),
	logout() 메소드를 선언해보세요.
	
	1) login() 메소드는 매개값 id가 "hong", 매개값 password가 "12345"일 경우에만 true로 리턴하고 그 이외의 값일 경우에는
	  false를 리턴하도록 하세요.
	2) logout() 메소드의 내용은 "로그아웃 되었습니다."가 출력되도록 하세요.
	
		리턴 타입				메소드 이름				매개 변수(타입)
	------------------------------------------------------------------------
		boolean				login				id(String), password(String)
		void				logout				id(String)
		
	MemberServicejava
	---------------------------------------------------------------
	public class MemberService {
		//작성 위치
	}
	
	MemberServiceExample.java
	---------------------------------------------------------------
	public class MemberServiceExample {
		public static void main(String[] args) {
			MemberService memberservice = new MemberService();
			boolean result = memberService.login("hong", "12345");
			if(result) {
				System.out.println("로그인 되었습니다.");
				memberService.logout("hong");
			} else {
				System.out.println("id 또는 password가 올바르지 않습니다.");
			}
		}	
	}

16. PrinterExample 클래스에서 Printer 객체를 생성하고 println() 메소드를 호출해서 매개값을 콘솔에 출력하려고 합니다.
	println() 메소드의 매개값으로는 int, boolean, double, String 값을 줄 수 있습니다. 
	Printer 클래스에서 println() 메소드를 선언해보세요.

	Printer.java
	--------------------------------------------------------------
	public class Printer {
		//작성 위치
	}
	
	PrinterExample.java
	--------------------------------------------------------------
	public class PrinterExample {
		public static void main(String[] args) {
			Printer printer = new Printer();
			printer.println(10);
			printer.println(true);
			printer.println(5.7);
			printer.println("홍길동");
		}
	}
	
17. 16번 문제에서는 Printer 객체를 생성하고 println() 메소드를 생성했습니다. Printer 객체를 생성하지 않고 PrinterExample 클래스에서
	다음과 같이 호출하려면 Printer() 클래스를 어떻게 수정하면 될까요?
	
	Printer.java
	--------------------------------------------------------------
	public class Printer {
		//작성 위치
	}
	
	PrinterExample.java
	--------------------------------------------------------------
	public class PrinterExample {
		public static void main(String[] args) {
			Printer.println(10);
			Printer.println(true);
			Printer.println(5.7);
			Printer.println("홍길동");
		}
	}	

18. ShopService 객체를 싱글톤으로 만들고 싶습니다. ShopServiceExample 클래스에서 ShopService의 getInstance() 메소드로
	싱글톤을 얻을 수 있도록 ShopService 클래스를 작성해보세요.
	
	ShopService.java
	-------------------------------------------------------------
	public class ShopService {
		//작성 위치
	}
	
	ShopServiceExample.java
	-------------------------------------------------------------
	public class ShopServiceExample {
		public static void main(String[] args) {
			ShopService obj1 = ShopService.getInstance();
			ShopService obj2 = ShopService.getInstance();
			
			if(obj1 == obj2) {
				System.out.println("같은 ShopService 객체 입니다.");
			} else {
				System.out.println("다른 ShopService 객체 입니다.");
			}
		}
	}

19. 은행 계좌 객체인 Account 객체는 잔고(balance) 필드를 가지고 있습니다. balance 필드는 음수값이 될 수 없고,
	최대 백만 원까지만 저장할 수 있습니다. 외부에서 balance 필드를 마음대로 변경하지 못하도록 하고, 
	0 <= balance <= 1,000,000 범위의 값만 가질 수 있도록 Account 클래스를 작성해보세요.
	
	1) Setter와 Getter를 이용하세요.
	2) 0과 1,000,000은 MIN_BALANCE와 MAX_BALANCE 상수를 선언해서 이용하세요.
	3) Setter의 매개값이 음수이거나 백만 원을 초과하면 현재 balance 값을 유지하세요.
	
	Accout.java
	---------------------------------------------------------
	public class Account {
		//작성 위치
	}
	
	AccountExample.java
	--------------------------------------------------------
	public class AccountExample {
		public static void main(String[] args) {
			Account account = new Account();
			
			account.setBalance(10000);
			System.out.println("현재 잔고: " + account.getBalance());
			
			account.setBalance(-100);
			System.out.println("현재 잔고: " + account.getBalance());
			
			account.setBalance(2000000);
			System.out.println("현재 잔고: " + account.getBalance());
			
			account.setBalance(300000);
			System.out.println("현재 잔고: " + account.getBalance());
			
		}
	}
	
	실행 결과
	--------------------------------
	현재 잔고: 10000
	현재 잔고: 10000
	현재 잔고: 10000
	현재 잔고: 300000

20. 다음은 키보드로부터 계좌 정보를 입력받아서, 계좌를 관리하는 프로그램입니다. 
	실행 결과를 보고, 알맞게 BankApplication 클래스의 메소드를 작성해보세요.
	
	계좌생성 실행결과
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 1
	-------
	계좌생성
	-------
	계좌번호: 111-111
	계좌주: 홍길동
	초기입금액: 10000
	결과: 계좌가 생성되었습니다.
	
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 1
	-------
	계좌생성
	-------
	계좌번호: 111-222
	계좌주: 강자바
	초기입금액: 20000
	결과: 계좌가 생성되었습니다.
	
	계좌목록 실행결과
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 2
	-------
	계좌목록
	-------
	111-111		홍길동	10000
	111-222		강자바	20000
	
	예금 실행결과
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 3
	-------
	예금
	-------
	계좌번호: 111-111
	예금액: 5000
	결과: 예금이 성공되었습니다.
	
	출금 실행결과
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 4
	-------
	출금
	-------
	계좌번호: 111-222
	출금액: 3000
	결과: 출금이 성공되었습니다.
	
	계좌목록/종료 실행결과
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 2
	-------
	계좌목록
	-------
	111-111		홍길동	15000
	111-222		강자바	17000
	------------------------------------------
	1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료
	------------------------------------------
	선택> 5
	프로그램 종료	

	Account.java
	------------------------------------------------
	public class Account {
		private String ano;
		private String owner;
		pirvate int balance;
		
		public Account(String ano, String owner, int balance) {
			this.ano = ano;
			this.owner = owner;
			this.balance = balance;
		}
		
		public String getAno() { return ano; }
		public void setAno(String ano) { this.ano = ano; }
		
		public String getOwner() { return owner; }
		public void setOwner(String owner) { this.owner = owner; }
		
		public String getBalance() { return balance; }
		public void setBalance(String balance) { this.balance = balance; }
	}


	BankApplication.java
	-------------------------------------------------------
	import java.util.Scanner;
	
	public class BankApplication {
		private static Account[] accountArray = new Account[100];
		private static Scanner scanner = new Scanner(System.in);
		
		public static void main(String[] args) {
			boolean run = true;
			while(run) {
				System.out.println("------------------------------------------");
				System.out.println("1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료");
				System.out.println("------------------------------------------");
				System.out.print("선택> ");
				
				int selectNo = scanner nextInt();
				
				if(selectNo == 1) {
					createAccount();
				} else if(selectNo == 2) {
					accountList();
				} else if(selectNo == 3) {
					deposit();
				} else if(selectNo == 4) {
					withdraw();
				} else if(selectNo == 5) {
					run = false;
				} 
			}
			
			System.out.println("프로그램 종료");
		}
	
		//계좌 생성하기
		private static void createAccount() {
			//작성 위치
		}
		
		//계좌 목록보기
		private static void accountList() {
			//작성 위치
		}
		
		//예금하기
		private static void deposit() {
			//작성 위치(findAccount() 호출해서 이용)
		}
		
		//출금하기
		private static void withdraw() {
			//작성 위치(findAccount() 호출해서 이용)
		}
		
		//Account 배열에서 ano와 동일한 Account 객체 찾기
		private static Account findAccount(String ano) {
			//작성 위치
		}
	}
----------------------------------------------------------------------------------------------------------------------------------------

확인 문제 정답

1. 3)
2. 4)
3. 4)
4. 3)
5. 1)
6. 4)
7. 2)
8. 2)
9. 2)
10. 4)
11. 3)
12. 필드, 생성자, 메소드
13.	
	public class Member {
		String name;
		String id;
		String password;
		int age;
	}
	
14. 
	public class Member {
		String name;
		String id;
		String password;
		int age;
		
		Member(String name, String id) {
			this.name = name;
			this.id = id;
		}
	}

15.
	public class MemberService {
		boolean login(String id, String password) {
			if(id.equals("hong") && password.equals("12345")) {
				return true;
			} else {
				return false;
			}
		}
		
		void logout(String id) {
			System.out.println("로그아웃 되었습니다.");
		}
	}
	
16.
	public class Printer {
		void println(int value) {
			System.out.println(value);
		}
		
		void println(boolean value) {
			System.out.println(value);
		}
		
		void println(double value) {
			System.out.println(value);
		}
		
		void println(String value) {
			System.out.println(value);
		}
	}
	
17. 
	public class Printer {
		static void println(int value) {
			System.out.println(value);
		}
		
		static void println(boolean value) {
			System.out.println(value);
		}
		
		static void println(double value) {
			System.out.println(value);
		}
		
		static void println(String value) {
			System.out.println(value);
		}
	}

18.
	public class ShopService {
		private static ShopService singleton = new ShopService();
		
		private ShopService() {}
		
		static ShopService getInstance() {
			return singleton;
		}
	}
		
19.
	public class Account {
		public static final int MIN_BALANCE = 0;
		public static final int MAX_BALANCE = 1000000;
		private int balance;
	
		public int getBalance() {
			return balance;
		}
	
		public void setBalance(int balance) {
			if(balance<Account.MIN_BALANCE || balance>Account.MAX_BALANCE) {
				return;
			}
			this.balance = balance;
		}
	}
	
20.
	import java.util.Scanner;
	
	public class BankApplication {
		private static Account[] accountArray = new Account[100];
		private static Scanner scanner = new Scanner(System.in);
		
		public static void main(String[] args) {
			boolean run = true;		
			while(run) {
				System.out.println("----------------------------------------------------------");
				System.out.println("1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료");
				System.out.println("----------------------------------------------------------");
				System.out.print("선택> ");
				
				int selectNo = scanner.nextInt();
				
				if(selectNo == 1) {
					createAccount();
				} else if(selectNo == 2) {
					accountList();
				} else if(selectNo == 3) {
					deposit();
				} else if(selectNo == 4) {
					withdraw();
				} else if(selectNo == 5) {
					run = false;
				}
			}
			System.out.println("프로그램 종료");
		}
		
		//계좌생성하기
		private static void createAccount() {
			System.out.println("--------------");
			System.out.println("계좌생성");
			System.out.println("--------------");
			
			System.out.print("계좌번호: "); 
			String ano = scanner.next();
			
			System.out.print("계좌주: "); 
			String owner = scanner.next();
			
			System.out.print("초기입금액: ");
			int balance = scanner.nextInt();
			
			Account newAccount = new Account(ano, owner, balance);
			for(int i=0; i<accountArray.length; i++) {
				if(accountArray[i] == null) {
					accountArray[i] = newAccount;
					System.out.println("결과: 계좌가 생성되었습니다.");
					break;
				}
			}
		}
		
		//계좌목록보기
		private static void accountList() {
			System.out.println("--------------");
			System.out.println("계좌목록");
			System.out.println("--------------");
			for(int i=0; i<accountArray.length; i++) {
				Account account = accountArray[i];
				if(account != null) {
					System.out.print(account.getAno());
					System.out.print("     ");
					System.out.print(account.getOwner());
					System.out.print("     ");
					System.out.print(account.getBalance());
					System.out.println();
				}
			}
		}
		
		//예금하기
		private static void deposit() {
			System.out.println("--------------");
			System.out.println("예금");
			System.out.println("--------------");
			System.out.print("계좌번호: "); 
			String ano = scanner.next();
			System.out.print("예금액: ");
			int money = scanner.nextInt();
			Account account = findAccount(ano);
			if(account == null) {
				System.out.println("결과: 계좌가 없습니다.");
				return;
			}
			account.setBalance(account.getBalance() + money);
			System.out.println("결과: 예금이 성공되었습니다.");
		}
		
		//출금하기
		private static void withdraw() {
			System.out.println("--------------");
			System.out.println("출금");
			System.out.println("--------------");
			System.out.print("계좌번호: "); 
			String ano = scanner.next();
			System.out.print("출금액: ");
			int money = scanner.nextInt();
			Account account = findAccount(ano);
			if(account == null) {
				System.out.println("결과: 계좌가 없습니다.");
				return;
			}
			account.setBalance(account.getBalance() - money);
			System.out.println("결과: 출금이 성공되었습니다.");
		}	
		
		//Account 배열에서 ano와 동일한 Account 객체 찾기
		private static Account findAccount(String ano) {
			Account account = null;
			for(int i=0; i<accountArray.length; i++) {
				if(accountArray[i] != null) {
					String dbAno = accountArray[i].getAno();
					if(dbAno.equals(ano)) {
						account = accountArray[i];
						break;
					}
				}
			}
			return account;
		}
	}